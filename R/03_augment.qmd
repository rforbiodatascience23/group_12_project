---
title: "03_augment.qmd"
author: "group_12"
format: 
  html:
    embed-resources: true
editor: visual
---

{{< include _01_load.qmd >}}

{{< include _02_clean.qmd >}}

```{r load_libraries}
library(tidyverse)
```

## Data scraping

The tidyverse library "who" is used to scrape the column *Description* for matching countries. The first value that is extracted is then added to a new column called Country- representing each country that an outbreak originated in

\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*THIS LINE NEEDS TO BE CHANGED / Camilla \*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*''

```{r}
countries <-isocodes |>    
  distinct(Country) |>    
  format_delim(delim="|",
               eol = "|", 
               col_names = FALSE) |>    
  str_sub(end =-2)  

uniqdisease <- uniqueDONs_clean |>    
  select(Country, 
         DONs, 
         Disease) |>     
  separate_longer_delim(DONs, 
                        delim = ",",) |>    
  mutate(DONs=str_remove(DONs," "))  


rawdons_aug <- rawdons_clean |>      
  mutate(       
    Country = sapply(str_extract_all(Description, 
                                     str_c("United Kingdom|CÃ´te d'Ivoire|Hong Kong|Republic of Korea|Tanzania|Iran|United States|Lao People's Democratic Republic|Venezuela|saudi_arabia|Bolivia|",countries)), 
                     function(x) paste(unique(x), 
                                       collapse=','))) |>  
  separate_longer_delim(Country,
                        delim=",")

# if country is na find the corresponding don in uniquedisease and fill correspondng country 
rawdons_aug <- rawdons_aug |> 
  mutate(Country =na_if(Country, ""))

```

## The Isocodes

The isocodes are a collection of short country codes for each country and they are merged by the country to created a new object

```{r}

isocodesaug <- isocodes |>    
  select(iso2,
         iso3,
         Country)  

rawdons_aug <-rawdons_aug |>    
  mutate(Country = str_replace_all(
    Country, c("Democratic Republic of the Congo" = "Congo Democratic Republic of the",        
               "Republic of Korea" = "Korea Republic of",
               "United Republic of Tanzania" = "Tanzania United Republic of"))) |>    
  left_join(isocodesaug, 
            join_by(Country)) 

```

## The ICD codes

The disease that is associated with each DON is taken from the completed dataframe *uniquedons.csv*. Then the icd codes, which are a collection of disease descriptions, are merged to create a dataframe with all associated dons, disease and diseaase descriptions

```{r}

rawdons_aug <-rawdons_aug |>   
  left_join(uniqdisease, join_by(DONs, Country))

rawdons_aug <- rawdons_aug |>  
  filter(!is.na(Disease)) |> 
  mutate(Disease = ifelse(is.na(Disease), 
                          DONs, 
                          Disease)) |>
  left_join(icd1011, join_by(Disease))
```

## Data Specifics

The Dons that are not related to disease outbreaks are then deleted, such as meetings of international experts (see DON0133), recommendations on treatments (DON0153), or travel requirements (DON0107 and DON0198).

```{r}
rawdons_aug <- rawdons_aug |>    
  filter(DONs != "DON0133"& DONs != "DON0153"& DONs!="DON0107"& DONs != "DON0198") |>    
  arrange(Country) |>    
  mutate(Country = ifelse((Disease == "Anthrax, 
                           unspecified" & Year == "2001"), 
                          "United States", 
                          Country))
```

## Duplicate Removal

Combine all dons from the same outbreak into one column by removing duplicates. Deleting all the DONs registering the information on the same disease for the same country more than once in a given calendar year. This create a file with 1233 unique dons out of the original 1566. This is due to the fact that the paper obtained these missing countries from web scraping the titles as well as the description which was not the approach that was used here. The following analysis will use the completed using the *uniquedons* variable.

```{r}
rawdons_aug <-rawdons_aug |> 
  mutate(key = as.factor(paste0(iso3, 
                                Year, 
                                icd104c))) |> 
  group_by(key) |> 
  mutate(AllDONs = paste(DONs, 
                         collapse = ", ")) |> 
  ungroup() |> 
  distinct(Country, 
           iso2, 
           iso3, 
           Year, 
           icd10n, 
           icd103n, 
           icd104n, 
           icd10c, 
           icd103c, 
           icd104c, 
           icd11c1, 
           icd11c2, 
           icd11c3, 
           icd11l1, 
           icd11l2, 
           icd11l3, 
           Disease, 
           Definition, 
           AllDONs) # 1566 unique events apparently but only have 1233 so far as 271 countries are not named in Description column
```

##Augment the clean merged data file.

New column added for the the classification of different diseases types. COVID-19, Influenza and Cholera were not included in any category as they are major outbreaks and we wanted to show their influence separately.

```{r}
final_outbreaks <- final_outbreaks |>
  mutate(icd11l2 = str_trim(icd11l2)) |>
   mutate(Disease_class = case_when(icd11l2 %in% 
                                      c("Certain arthropod-borne viral fevers",
                                        "Certain zoonotic bacterial diseases",
                                        "Certain zoonotic viral diseases",
                                        "Dengue") ~ "Zoonotic diseases",
                                    icd11l2 %in%
                                      c("Bacteria or viral infection",
                                        "Certain other viral diseases",
                                        "Viral hepatitis",
                                        "Human immunodeficiency virus disease",
                                        "Viral infections characterised by skin or mucous membrane lesions",
                                        "Viral infections of the central nervous system",
                                        "Lung infections",
                                        "Human prion diseases") ~ "Viral infections",
                                    icd11l2 %in% 
                                      c("Other bacterial diseases",
                                        "Mycobacterial diseases",
                                        "Sepsis",
                                        "Predominantly sexually transmitted infections",
                                        "Mycoses") ~ "Bacteria and fungus infections",
                                    icd11l2 %in% c("Parasitic diseases",
                                                   "Nonintestinal protozoal diseases") ~ "Parasitic infections",
                                    icd11l2 == "Gastroenteritis or colitis of infectious origin" ~ "Cholera-Intestinal diseases",
                                    icd11l2 == "Influenza" ~ "Influenza infections",
                                    icd11l2 == "Not reported" ~ "Uncertain diseases",
                                    icd11l2 == "New uncertain disease" ~ "Covid-19"))
```

For income data, we replace the "NA"s with a category called "No income data available", then we make the variable a factor based on income, ranking "high income" highest, and "No income data available" lowest.

```{r}
  final_outbreaks <- final_outbreaks |>
  mutate (Income.Group = if_else(is.na(Income.Group), 
                                 "No income data available", 
                                 Income.Group),
          Income.Group = factor(Income.Group, 
                                levels = c("High income", 
                                           "Upper middle income", 
                                           "Lower middle income", 
                                           "Low income", 
                                           "No income data available")))
```

\### THIS DOCUMENT WILL END WITH A 03_DAT_AUG file, that we all use for the graphs.

#### Splitting Coordinates into Latitude and Longitude columns

```{r}
final_outbreaks <- final_outbreaks |> 
  mutate(
    Coordinates = str_split(as.character(Coordinates), 
                            ", ", 
                            simplify = TRUE),
    Latitude = as.numeric(Coordinates[, 1]),
    Longitude = as.numeric(Coordinates[, 2])
  ) |> 
  select(-Coordinates)
```
