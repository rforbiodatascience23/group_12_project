---
title: "analysis"
format: html
editor: visual
---

# Merging Outbreaks data set with World Administrative Boundaries:

## Load data

```{r}
worldboundaries <- read.csv("../_raw/wordboundaries.csv", sep = ";")
Outbreaks <- "../_raw/Outbreaks.RData"
load(Outbreaks)
```

## Load libraries

```{r}
library("tidyverse")
library("ggplot2")
library("dplyr")
library('viridis')
#library('maps')
#library('leaflet')
```

## 

## Wrangling Outbreaks data set:

#### Adding a column with value "1":

```{r}
Outbreaks <- Outbreaks |>  
  mutate(Ones = 1)

```

#### Correcting countries' names and iso3:

```{r}
# (These were discovered upon visualization)
Outbreaks <- Outbreaks |>  
  mutate(Country = ifelse( Country == "Congo Democratic Republic of the", "Congo", Country),
         iso3 = ifelse( iso3 == "COD", "COG", iso3),
         iso3 = ifelse( iso3 == "United States of America", "USA", iso3))
         
```

#### Reshaping dataset:

-   Keeping the unique combinations of "Country", "iso3", "Year" and adding the icd104c values as columns

-   Filling empty cells with 0.

```{r}
outbreaks_wide <- Outbreaks |> 
  pivot_wider(
    id_cols = c("Country", "iso3", "Year"),
    names_from = icd104c,
    values_from = "Ones",
    values_fill = 0,  # Fill missing values with 0
    values_fn = list(Ones = sum)  # Aggregation function
  )
```

#### Adding frequency column as the sum of all the outbreaks of each country for each year.

```{r}
outbreaks_wide <- outbreaks_wide |> 
  mutate(Freq = rowSums(select(outbreaks_wide, where(is.numeric))))

```

#### Creating diseases, by pivoting outbreaks_wide so that the information for each country is on the same row:

```{r}
diseases <- outbreaks_wide |> 
  pivot_wider(
    id_cols = c("iso3", "Country"),
    names_from = "Year",
    values_from = "Freq",
    values_fill = 0,
    values_fn = sum
  )
```

## Cleaning worldboundaries dataset:

#### Removing rows with blank cells

```{r}
worldboundaries <- worldboundaries |> 
  filter_all(all_vars(. != ""))

```

#### Renaming iso3, Continent and Coordinates column and removing not needed columns:

```{r}
worldboundaries <- worldboundaries |> 
  rename(
    iso3 = "ISO.3.country.code",
    Continent = "Continent.of.the.territory",
    Coordinates = Geo.Shape) |> 
  select(-French.Name, -English.Name,-ISO.3.territory.code, -Region.of.the.territory, -ISO.3166.1.Alpha.2.Codes)
```

```{r}
# (These were discovered upon visualization)
worldboundaries <- worldboundaries |>
  mutate(iso3 = ifelse(iso3 == "United States of America", "USA", 
                       ifelse(iso3 == "Brazil", "BRA", iso3))) |>
  mutate(Continent = ifelse(Continent %in% c("Northern America", "South America"), 
                              "Americas", Continent)) |>
  filter(!(Continent == "Oceania" & iso3 == "USA") & 
         !(Continent == "Northern America" & iso3 == "USA") & 
         !(Continent != "Europe" & iso3 %in% c("GBR", "FRA")))

```

#### Removing rows with duplicates of the same iso3

```{r}
worldboundaries <- worldboundaries |>
  distinct(iso3, .keep_all = TRUE)
```

#### 

## Merging diseases and worldboundaries

```{r}
merged_data <- merge(worldboundaries, na.omit(diseases), by = "iso3", all.x = TRUE)

```

## Cleaning merged data:

#### Dealing with missing values:

```{r}
merged_data <- na.omit(merged_data)

```

#### Shortening Countries' names (to facilitate visualization):

```{r}
merged_data <- merged_data |> 
  mutate(Country = ifelse(Country == "United Kingdom of Great Britain and Northern Ireland", "United Kingdom", Country))
```

## Wrangling merged data:

#### Adding a column with total number of outbreaks in 1996-2022 for each country:

```{r}
merged_data <- merged_data |>
  rowwise() |>
  mutate(total_outbreaks = sum(across(where(is.numeric)), na.rm = TRUE))

```

#### Arranging the data by total outbreaks

```{r}
merged_data <- merged_data[order(merged_data$total_outbreaks, decreasing = TRUE), ]

```

#### Splitting Geo.Point into Latitude and Longitude columns

```{r}
coordinates <- strsplit(as.character(merged_data$Geo.Point), ", ", fixed = TRUE)

# Create Latitude and Longitude columns
merged_data$Latitude <- as.numeric(sapply(coordinates, `[`, 1))
merged_data$Longitude <- as.numeric(sapply(coordinates, `[`, 2))

#Remove Geo.Point column
merged_data<- merged_data |> 
  select(-Geo.Point)
```

#### Pivoting merged_data

```{r}
merged_data_long <- merged_data |> 
  pivot_longer(cols = c("1996","1997","1998","1999","2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022"),
               names_to = "Year",
               values_to = "Frequency") |> 
  mutate(Frequency = as.numeric(Frequency))

```

## 

## Visualisation:

#### Density plot of outbreaks for each continent

```{r}
ggplot(merged_data_long, aes(x = Frequency, fill = Continent)) +
  geom_density() +
  xlab("Total frequency of outbreaks (1996 - 2022)") +
  ylab("Density") +
  facet_wrap(~ Continent) +
  theme_minimal()
```

#### Barplot of the 20 Countries with the highest number of outbreaks (1996 - 2022):

```{r}
# Select the top 20 countries
top_countries <- merged_data$
Country[1:20]

# Plot the top 20 countries
ggplot(merged_data, aes(x = Country, y = total_outbreaks, fill = Continent)) + 
  geom_bar(stat = "identity") + 
  labs(y = "Total frequency of outbreaks (1996 - 2022)", 
  x="Country",
  title ='Top 20 countries with the highest number of outbreaks') +
  theme_minimal() + 
  scale_fill_viridis_d(alpha = 1) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8), plot.title = element_text(hjust = 0.5)) + 
  scale_x_discrete(limits = top_countries)


```

#### Barplot of the yearly number of outbreaks:

```{r}
# Calculate sum of observations for each year
yearly_sum <- merged_data |>
  select(matches("^\\d{4}$")) |>
  pivot_longer(cols = everything(), names_to = "Year", values_to = "Outbreaks") |>
  group_by(Year) |>
  summarise(Outbreaks = sum(Outbreaks))

# Plot the barplot
ggplot(yearly_sum, aes(x = Year, y = Outbreaks)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(title = "Yearly Outbreaks (1996-2022)",
       x = "Year",
       y = "Total Outbreaks") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),plot.title = element_text(hjust = 0.5))
  
```

#### Map plot with the spatial frequency of outbreaks

```{r}
#you need #library('maps') and #library('leaflet')
# Define color palette 
color_palette <- colorNumeric(
  palette = "viridis", 
  domain = merged_data$total_outbreaks
)

# Create a leaflet map with colored circle markers
map <- leaflet(data = merged_data) |>
  addTiles() |>
  addCircleMarkers(
    lng = ~Longitude,
    lat = ~Latitude,
    radius = 5,  
    fillColor = ~color_palette(total_outbreaks),
    fillOpacity = 0.8,
    color = "white",
    stroke = TRUE,
    weight = 1,
    label = ~as.character(total_outbreaks),
    popup = ~as.character(Country)
  ) |>
  addLegend(
    pal = color_palette,
    values = ~total_outbreaks,
    title = "Frequency of Outbreaks",
    opacity = 1
  )

# Print the map
map

```
